<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - StockTrade</title>
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        /* Body Styling */
        body {
            background: linear-gradient(to right, #1f4037, #99f2c8);
            color: #fff;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
        }

        /* Container Styling */
        .container {
            width: 90%;
            max-width: 1200px;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            margin-bottom: 30px;
        }

        h2 {
            text-align: center;
            margin-bottom: 20px;
            font-size: 28px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            color: #ffdd57;
        }

        /* Table Styling */
        table {
            width: 100%;
            border-collapse: collapse;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            color: #fff;
        }

        th {
            background: rgba(255, 255, 255, 0.2);
            font-weight: bold;
        }

        tr:hover {
            background: rgba(255, 255, 255, 0.2);
            transition: 0.3s;
        }

        /* Button Styling */
        button {
            padding: 10px 20px;
            font-size: 14px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }

        .accept {
            background: #28a745;
            color: white;
        }

        .reject {
            background: #dc3545;
            color: white;
        }

        .delete-button {
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        .delete-button:hover {
            background-color: #c0392b;
        }

        button:hover {
            opacity: 0.9;
        }

        /* Form Styling */
        textarea {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            margin-bottom: 10px;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
            resize: none;
        }

        textarea::placeholder {
            color: #ccc;
        }

        .send-button {
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        .send-button:hover {
            background-color: #2874a6;
        }

        /* Messages List Styling */
        .messages-list {
            list-style: none;
            padding: 0;
            margin: 20px 0;
        }

        .message-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f4f4f4;
            padding: 10px 15px;
            border-radius: 5px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .message-content {
            font-size: 16px;
            color: #333;
        }

        .message-date {
            font-size: 12px;
            color: #d4d4d4;
        }

        .no-messages {
            font-size: 16px;
            color: #ccc;
            text-align: center;
            margin-top: 20px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            table, th, td {
                font-size: 14px;
            }

            .container {
                padding: 15px;
            }

            h2 {
                font-size: 24px;
            }

            button {
                font-size: 12px;
                padding: 8px 15px;
            }

            textarea {
                font-size: 14px;
            }
        }

        @media (max-width: 480px) {
            th, td {
                font-size: 12px;
            }

            h2 {
                font-size: 20px;
            }

            button {
                font-size: 10px;
                padding: 6px 10px;
            }

            textarea {
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <!-- <div class="container">
        <h2>All Users</h2>
        <% if (users && users.length > 0) { %>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach((user, index) => { %>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><%= user.name %></td>
                            <td><%= user.email %></td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        <% } else { %>
            <p>No users found</p>
        <% } %>
    </div>

    <div class="container">
        <h2>All Transactions</h2>
        <% if (transactions && transactions.length > 0) { %>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Email</th>
                        <th>Name</th>
                        <th>Plan</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Created At</th>
                        <th>End Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% transactions.forEach((transaction) => { %>
                        <tr id="transaction-<%= transaction.id %>">
                            <td><%= transaction.id %></td>
                            <td><%= transaction.email %></td>
                            <td><%= transaction.name %></td>
                            <td><%= transaction.plan %></td>
                            <td><%= transaction.amount %></td>
                            <td><%= transaction.status %></td>
                            <td><%= new Date(transaction.transaction_date).toLocaleDateString() %></td>
                            <td><%= transaction.end_date ? new Date(transaction.end_date).toLocaleDateString() : 'N/A' %></td>
                            <td>
                                <% if (transaction.status === 'pending') { %>
                                    <button onclick="acceptTransaction('<%= transaction.id %>')" class="accept">Accept</button>
                                    <button onclick="rejectTransaction('<%= transaction.id %>')" class="reject">Reject</button>
                                <% } else if (transaction.status === 'accepted') { %>
                                    <button onclick="deleteTransaction('<%= transaction.id %>')" class="reject">Delete</button>
                                <% } else { %>
                                    <span style="color: grey;">No Actions</span>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        <% } else { %>
            <p>No transactions found</p>
        <% } %>
    </div> -->

    <div class="container">
        <h2>All Messages</h2>
        <% if (messages && messages.length > 0) { %>
            <ul class="messages-list">
                <% messages.forEach((message) => { %>
                    <li class="message-item" id="message-<%= message._id %>">
                        <span class="message-content"><%= message.content %></span>
                        <small class="message-date">Posted on <%= new Date(message.createdAt).toLocaleString() %></small>
                        <button class="delete-button" onclick="deleteMessage('<%= message._id %>')">Delete</button>
                    </li>
                <% }); %>
            </ul>
        <% } else { %>
            <p class="no-messages">No messages available.</p>
        <% } %>
    </div>

    <div class="container">
        <h2>Send a Message</h2>
        <form action="/send-message" method="POST">
            <textarea name="message" rows="4" placeholder="Enter your message here..." required></textarea>
            <button type="submit" class="send-button">Send Message</button>
        </form>
    </div>

    <script>
        async function deleteMessage(messageId) {
            const confirmDelete = confirm('Are you sure you want to delete this message?');
            if (!confirmDelete) return;

            try {
                const response = await fetch(`/delete-message/${messageId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();
                if (response.ok) {
                    alert(data.message);
                    document.getElementById(`message-${messageId}`).remove();
                } else {
                    alert('Error: ' + data.message);
                }
            } catch (error) {
                alert('Server error while deleting the message.');
            }
        }
    </script>
</body>
</html>

    <script>
        // Format date for better readability
        function formatDate(date) {
            // Check if the date exists, if not, return the current date
            const d = date ? new Date(date) : new Date();
            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            return d.toLocaleDateString('en-US', options);
        }

        async function acceptTransaction(transactionId) {
            if (!transactionId) return alert('Invalid Transaction ID');
            try {
                const response = await fetch(`/admin/accept-transaction/${transactionId}`, {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (response.ok) { alert(data.message); location.reload(); }
                else { alert('Error: ' + data.message); }
            } catch (error) { alert('Server error while accepting transaction.'); }
        }

        async function rejectTransaction(transactionId) {
            if (!transactionId) return alert('Invalid Transaction ID');
            try {
                const response = await fetch(`/admin/reject-transaction/${transactionId}`, {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (response.ok) { alert(data.message); location.reload(); }
                else { alert('Error: ' + data.message); }
            } catch (error) { alert('Server error while rejecting transaction.'); }
        }

        async function deleteTransaction(transactionId) {
            if (!transactionId) return alert('Invalid Transaction ID');
            const confirmDelete = confirm('Are you sure you want to delete this transaction?');
            if (!confirmDelete) return;

            try {
                const response = await fetch(`/admin/delete-transaction/${transactionId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (response.ok) {
                    alert(data.message);
                    document.getElementById(`transaction-${transactionId}`).remove(); // Remove the transaction row from the table
                } else {
                    alert('Error: ' + data.message);
                }
            } catch (error) {
                alert('Server error while deleting transaction.');
            }
        }

        // Function to delete a message
        async function deleteMessage(messageId) {
            const confirmDelete = confirm('Are you sure you want to delete this message?');
            if (!confirmDelete) return;

            try {
                const response = await fetch(`/delete-message/${messageId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();
                if (response.ok) {
                    alert(data.message);
                    document.getElementById(`message-${messageId}`).remove(); // Remove the message from the admin page
                } else {
                    alert('Error: ' + data.message);
                }
            } catch (error) {
                alert('Server error while deleting the message.');
            }
        }
    </script>
</body>
</html>
